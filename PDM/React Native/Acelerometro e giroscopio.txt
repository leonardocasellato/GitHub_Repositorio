expo install expo-sensors expo-file-system react-native-svg
npm install papaparse react-native-chart-kit



import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, Dimensions, ScrollView, Button, Alert } from 'react-native';
import { Accelerometer, Gyroscope } from 'expo-sensors';
import { LineChart } from 'react-native-chart-kit';
import * as FileSystem from 'expo-file-system';
import Papa from 'papaparse';

export default function App() {
  const maxPoints = 30; // Pontos vis칤veis no gr치fico

  const [accelData, setAccelData] = useState({ x: 0, y: 0, z: 0 });
  const [gyroData, setGyroData] = useState({ x: 0, y: 0, z: 0 });
  const [accelHistory, setAccelHistory] = useState([]);
  const [gyroHistory, setGyroHistory] = useState([]);
  const [csvData, setCsvData] = useState([]);
  const [movementCount, setMovementCount] = useState(0);

  useEffect(() => {
    Accelerometer.setUpdateInterval(100);
    Gyroscope.setUpdateInterval(100);

    const accelSub = Accelerometer.addListener(data => {
      setAccelData(data);
      updateHistory(data, gyroData);
    });

    const gyroSub = Gyroscope.addListener(data => {
      setGyroData(data);
      updateHistory(accelData, data);
    });

    return () => {
      accelSub.remove();
      gyroSub.remove();
    };
  }, []);

  const updateHistory = (accel, gyro) => {
    // Atualiza gr치fico aceler칪metro
    setAccelHistory(prev => [...prev.slice(-maxPoints + 1), accel.x]);
    // Atualiza gr치fico girosc칩pio
    setGyroHistory(prev => [...prev.slice(-maxPoints + 1), gyro.x]);

    // Detecta movimento simples: se a soma dos m칩dulos passar de um limite
    const accelMagnitude = Math.sqrt(accel.x ** 2 + accel.y ** 2 + accel.z ** 2);
    if (accelMagnitude > 1.3) {
      setMovementCount(prev => prev + 1);
    }

    // Salva no hist칩rico CSV
    setCsvData(prev => [
      ...prev,
      {
        timestamp: new Date().toISOString(),
        accel_x: accel.x,
        accel_y: accel.y,
        accel_z: accel.z,
        gyro_x: gyro.x,
        gyro_y: gyro.y,
        gyro_z: gyro.z,
        movementCount
      }
    ]);
  };

  const exportCSV = async () => {
    if (csvData.length === 0) {
      Alert.alert('Sem dados', 'N칚o h치 dados para exportar.');
      return;
    }
    const csv = Papa.unparse(csvData);
    const fileUri = FileSystem.documentDirectory + 'movimentos.csv';
    try {
      await FileSystem.writeAsStringAsync(fileUri, csv, { encoding: FileSystem.EncodingType.UTF8 });
      Alert.alert('Exportado!', `Arquivo salvo em:\n${fileUri}`);
      console.log('游늭 CSV salvo:', fileUri);
    } catch (error) {
      Alert.alert('Erro', 'N칚o foi poss칤vel salvar o arquivo.');
      console.error(error);
    }
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.title}>游늳 Monitor de Movimentos</Text>
      <Text style={styles.info}>Movimentos detectados: {movementCount}</Text>

      <Text style={styles.sensorTitle}>Aceler칪metro</Text>
      <Text style={styles.sensorText}>
        X: {accelData.x.toFixed(2)} | Y: {accelData.y.toFixed(2)} | Z: {accelData.z.toFixed(2)}
      </Text>

      <Text style={styles.sensorTitle}>Girosc칩pio</Text>
      <Text style={styles.sensorText}>
        X: {gyroData.x.toFixed(2)} | Y: {gyroData.y.toFixed(2)} | Z: {gyroData.z.toFixed(2)}
      </Text>

      <LineChart
        data={{
          labels: Array.from({ length: accelHistory.length }, () => ''),
          datasets: [
            { data: accelHistory, color: () => 'red', strokeWidth: 2 },
            { data: gyroHistory, color: () => 'blue', strokeWidth: 2 }
          ],
          legend: ['Accel X', 'Gyro X']
        }}
        width={Dimensions.get('window').width - 20}
        height={250}
        chartConfig={{
          backgroundColor: '#000',
          backgroundGradientFrom: '#1E1E1E',
          backgroundGradientTo: '#1E1E1E',
          decimalPlaces: 2,
          color: (opacity = 1) => `rgba(255,255,255,${opacity})`,
          labelColor: () => '#fff',
          propsForDots: { r: '0' }
        }}
        bezier
        style={styles.chart}
      />

      <View style={styles.buttonContainer}>
        <Button title="游닋 Exportar CSV" onPress={exportCSV} />
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    backgroundColor: '#121212',
    alignItems: 'center',
    padding: 10,
    paddingTop: 50
  },
  title: {
    fontSize: 22,
    color: '#fff',
    marginBottom: 10
  },
  info: {
    fontSize: 18,
    color: '#0f0',
    marginBottom: 20
  },
  sensorTitle: {
    fontSize: 18,
    color: '#fff',
    marginTop: 10
  },
  sensorText: {
    fontSize: 16,
    color: '#ccc',
    marginBottom: 10
  },
  chart: {
    borderRadius: 8,
    marginTop: 20
  },
  buttonContainer: {
    marginTop: 20,
    width: '80%'
  }
});

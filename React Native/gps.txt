Solicita permiss√£o de localiza√ß√£o ao usu√°rio.

Inicia rastreamento cont√≠nuo do GPS com alta precis√£o.

Mostra latitude, longitude, altitude, velocidade, precis√£o e timestamp.

Permite iniciar e parar o rastreamento.

Funciona tanto em Android quanto em iOS (testar em dispositivo real).

expo install expo-location


import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, Button, ScrollView, Alert } from 'react-native';
import * as Location from 'expo-location';

export default function App() {
  const [location, setLocation] = useState(null);
  const [errorMsg, setErrorMsg] = useState(null);
  const [watchId, setWatchId] = useState(null);

  // Solicitar permiss√£o
  const requestPermission = async () => {
    let { status } = await Location.requestForegroundPermissionsAsync();
    if (status !== 'granted') {
      setErrorMsg('Permiss√£o de localiza√ß√£o negada!');
      Alert.alert('Erro', 'Permiss√£o de localiza√ß√£o negada!');
      return false;
    }
    return true;
  };

  // Iniciar atualiza√ß√£o cont√≠nua
  const startTracking = async () => {
    const granted = await requestPermission();
    if (!granted) return;

    const id = await Location.watchPositionAsync(
      {
        accuracy: Location.Accuracy.Highest,
        timeInterval: 1000,    // atualiza√ß√£o a cada 1s
        distanceInterval: 0,   // atualiza√ß√£o em qualquer movimento
      },
      (loc) => setLocation(loc)
    );
    setWatchId(id);
  };

  // Parar atualiza√ß√£o
  const stopTracking = () => {
    if (watchId) {
      watchId.remove();
      setWatchId(null);
      Alert.alert('Tracking', 'Atualiza√ß√£o de GPS parada.');
    }
  };

  // Exibir valores seguros
  const safe = (v) => (v != null ? v.toFixed(6) : '‚Äî');

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.title}>üìç Informa√ß√µes do GPS</Text>

      {location ? (
        <View style={styles.infoContainer}>
          <Text style={styles.text}>Latitude: {safe(location.coords.latitude)}</Text>
          <Text style={styles.text}>Longitude: {safe(location.coords.longitude)}</Text>
          <Text style={styles.text}>Altitude: {safe(location.coords.altitude)} m</Text>
          <Text style={styles.text}>Velocidade: {safe(location.coords.speed)} m/s</Text>
          <Text style={styles.text}>Precis√£o: {safe(location.coords.accuracy)} m</Text>
          <Text style={styles.text}>Timestamp: {new Date(location.timestamp).toLocaleTimeString()}</Text>
        </View>
      ) : (
        <Text style={styles.text}>Nenhuma posi√ß√£o dispon√≠vel</Text>
      )}

      <View style={styles.buttons}>
        <Button title="‚ñ∂ Iniciar rastreamento" onPress={startTracking} disabled={!!watchId} />
        <Button title="‚è∏ Parar rastreamento" onPress={stopTracking} disabled={!watchId} />
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    padding: 20,
    backgroundColor: '#121212',
    alignItems: 'center',
    justifyContent: 'center',
  },
  title: {
    fontSize: 22,
    color: '#fff',
    marginBottom: 20,
  },
  infoContainer: {
    backgroundColor: '#1E1E1E',
    padding: 15,
    borderRadius: 10,
    marginBottom: 20,
    width: '100%',
  },
  text: {
    fontSize: 16,
    color: '#fff',
    marginBottom: 5,
  },
  buttons: {
    flexDirection: 'row',
    gap: 10,
    justifyContent: 'space-between',
    width: '100%',
  },
});
